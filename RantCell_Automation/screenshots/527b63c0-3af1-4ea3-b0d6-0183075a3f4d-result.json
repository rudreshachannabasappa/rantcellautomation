{"name": "test_campaign[Samsung SM-G781B-T001-PreProd-https://preproductionpro.rantcell.com/-eva@rantcell.com-eva@2023]", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <testcases.test_campaigns.Test_Campaign_Driver object at 0x000001E69E023670>\nurl = 'https://preproductionpro.rantcell.com/'\ntitle = 'https://preproductionpro.rantcell.com/'\n\n    def launchbrowser(self, url, title):\n        try:\n            with allure.step(\"Launch the browser and navigate to \" + url):\n                self.driver.get(url)\n                time.sleep(2)\n                self.driver.maximize_window()\n                time.sleep(2)\n                actualtitle = self.driver.current_url\n                if actualtitle == title:\n                    self.driver.get_screenshot_as_file(\"screenshot.png\")\n>                   allure.attach.file(\"screenshot.png\", name=\"URL\" + actualtitle,\n                                       attachment_type=allure.attachment_type.PNG)\n\nRudreshaC\\PycharmProjects\\RantCell_Automation\\utils\\library.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <allure_commons._allure.Attach object at 0x000001E69DA06E20>\nsource = 'screenshot.png', name = 'URLhttps://preproductionpro.rantcell.com/'\nattachment_type = <AttachmentType.PNG: ('image/png', 'png')>, extension = None\n\n    def file(self, source, name=None, attachment_type=None, extension=None):\n>       plugin_manager.hook.attach_file(source=source, name=name, attachment_type=attachment_type, extension=extension)\n\nRudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\allure_commons\\_allure.py:203: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <_HookCaller 'attach_file'>, args = ()\nkwargs = {'attachment_type': <AttachmentType.PNG: ('image/png', 'png')>, 'extension': None, 'name': 'URLhttps://preproductionpro.rantcell.com/', 'source': 'screenshot.png'}\nnotincall = set()\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n        if self.spec and self.spec.argnames:\n            notincall = (\n                set(self.spec.argnames) - set([\"__multicall__\"]) - set(kwargs.keys())\n            )\n            if notincall:\n                warnings.warn(\n                    \"Argument(s) {} which are declared in the hookspec \"\n                    \"can not be found in this hook call\".format(tuple(notincall)),\n                    stacklevel=2,\n                )\n>       return self._hookexec(self, self.get_hookimpls(), kwargs)\n\nRudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\hooks.py:286: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pluggy.manager.PluginManager object at 0x000001E69D9D0280>\nhook = <_HookCaller 'attach_file'>\nmethods = [<HookImpl plugin_name='2090004876544', plugin=<allure_pytest.listener.AllureListener object at 0x000001E69DFF8D00>>]\nkwargs = {'attachment_type': <AttachmentType.PNG: ('image/png', 'png')>, 'extension': None, 'name': 'URLhttps://preproductionpro.rantcell.com/', 'source': 'screenshot.png'}\n\n    def _hookexec(self, hook, methods, kwargs):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook, methods, kwargs)\n\nRudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\manager.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhook = <_HookCaller 'attach_file'>\nmethods = [<HookImpl plugin_name='2090004876544', plugin=<allure_pytest.listener.AllureListener object at 0x000001E69DFF8D00>>]\nkwargs = {'attachment_type': <AttachmentType.PNG: ('image/png', 'png')>, 'extension': None, 'name': 'URLhttps://preproductionpro.rantcell.com/', 'source': 'screenshot.png'}\n\n>   self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\n        methods,\n        kwargs,\n        firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\n    )\n\nRudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\manager.py:84: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhook_impls = [<HookImpl plugin_name='2090004876544', plugin=<allure_pytest.listener.AllureListener object at 0x000001E69DFF8D00>>]\ncaller_kwargs = {'attachment_type': <AttachmentType.PNG: ('image/png', 'png')>, 'extension': None, 'name': 'URLhttps://preproductionpro.rantcell.com/', 'source': 'screenshot.png'}\nfirstresult = False\n\n    def _multicall(hook_impls, caller_kwargs, firstresult=False):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    \"hook call must provide argument %r\" % (argname,)\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n                        res = hook_impl.function(*args)\n                        if res is not None:\n                            results.append(res)\n                            if firstresult:  # halt further impl calls\n                                break\n            except BaseException:\n                excinfo = sys.exc_info()\n        finally:\n            if firstresult:  # first result hooks return a single value\n                outcome = _Result(results[0] if results else None, excinfo)\n            else:\n                outcome = _Result(results, excinfo)\n    \n            # run all wrapper post-yield blocks\n            for gen in reversed(teardowns):\n                try:\n                    gen.send(outcome)\n                    _raise_wrapfail(gen, \"has second yield\")\n                except StopIteration:\n                    pass\n    \n>           return outcome.get_result()\n\nRudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\callers.py:208: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pluggy.callers._Result object at 0x000001E69F5F37F0>\n\n    def get_result(self):\n        \"\"\"Get the result(s) for this hook call.\n    \n        If the hook was marked as a ``firstresult`` only a single value\n        will be returned otherwise a list of results.\n        \"\"\"\n        __tracebackhide__ = True\n        if self._excinfo is None:\n            return self._result\n        else:\n            ex = self._excinfo\n            if _py3:\n>               raise ex[1].with_traceback(ex[2])\n\nRudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\callers.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhook_impls = [<HookImpl plugin_name='2090004876544', plugin=<allure_pytest.listener.AllureListener object at 0x000001E69DFF8D00>>]\ncaller_kwargs = {'attachment_type': <AttachmentType.PNG: ('image/png', 'png')>, 'extension': None, 'name': 'URLhttps://preproductionpro.rantcell.com/', 'source': 'screenshot.png'}\nfirstresult = False\n\n    def _multicall(hook_impls, caller_kwargs, firstresult=False):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    \"hook call must provide argument %r\" % (argname,)\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\nRudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\callers.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <allure_pytest.listener.AllureListener object at 0x000001E69DFF8D00>\nsource = 'screenshot.png', name = 'URLhttps://preproductionpro.rantcell.com/'\nattachment_type = <AttachmentType.PNG: ('image/png', 'png')>, extension = None\n\n    @allure_commons.hookimpl\n    def attach_file(self, source, name, attachment_type, extension):\n>       self.allure_logger.attach_file(uuid4(), source, name=name, attachment_type=attachment_type, extension=extension)\n\nRudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\allure_pytest\\listener.py:240: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <allure_commons.reporter.AllureReporter object at 0x000001E69DFF8D30>\nuuid = '74c39602-d772-4ee8-93e1-f9274525678c', source = 'screenshot.png'\nname = 'URLhttps://preproductionpro.rantcell.com/'\nattachment_type = <AttachmentType.PNG: ('image/png', 'png')>, extension = None\nparent_uuid = None\n\n    def attach_file(self, uuid, source, name=None, attachment_type=None, extension=None, parent_uuid=None):\n        file_name = self._attach(uuid, name=name, attachment_type=attachment_type,\n                                 extension=extension, parent_uuid=parent_uuid)\n>       plugin_manager.hook.report_attached_file(source=source, file_name=file_name)\n\nRudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\allure_commons\\reporter.py:160: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <_HookCaller 'report_attached_file'>, args = ()\nkwargs = {'file_name': '74c39602-d772-4ee8-93e1-f9274525678c-attachment.png', 'source': 'screenshot.png'}\nnotincall = set()\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n        if self.spec and self.spec.argnames:\n            notincall = (\n                set(self.spec.argnames) - set([\"__multicall__\"]) - set(kwargs.keys())\n            )\n            if notincall:\n                warnings.warn(\n                    \"Argument(s) {} which are declared in the hookspec \"\n                    \"can not be found in this hook call\".format(tuple(notincall)),\n                    stacklevel=2,\n                )\n>       return self._hookexec(self, self.get_hookimpls(), kwargs)\n\nRudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\hooks.py:286: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pluggy.manager.PluginManager object at 0x000001E69D9D0280>\nhook = <_HookCaller 'report_attached_file'>\nmethods = [<HookImpl plugin_name='2090004952208', plugin=<allure_commons.logger.AllureFileLogger object at 0x000001E69E00B490>>]\nkwargs = {'file_name': '74c39602-d772-4ee8-93e1-f9274525678c-attachment.png', 'source': 'screenshot.png'}\n\n    def _hookexec(self, hook, methods, kwargs):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook, methods, kwargs)\n\nRudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\manager.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhook = <_HookCaller 'report_attached_file'>\nmethods = [<HookImpl plugin_name='2090004952208', plugin=<allure_commons.logger.AllureFileLogger object at 0x000001E69E00B490>>]\nkwargs = {'file_name': '74c39602-d772-4ee8-93e1-f9274525678c-attachment.png', 'source': 'screenshot.png'}\n\n>   self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\n        methods,\n        kwargs,\n        firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\n    )\n\nRudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\manager.py:84: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhook_impls = [<HookImpl plugin_name='2090004952208', plugin=<allure_commons.logger.AllureFileLogger object at 0x000001E69E00B490>>]\ncaller_kwargs = {'file_name': '74c39602-d772-4ee8-93e1-f9274525678c-attachment.png', 'source': 'screenshot.png'}\nfirstresult = False\n\n    def _multicall(hook_impls, caller_kwargs, firstresult=False):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    \"hook call must provide argument %r\" % (argname,)\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n                        res = hook_impl.function(*args)\n                        if res is not None:\n                            results.append(res)\n                            if firstresult:  # halt further impl calls\n                                break\n            except BaseException:\n                excinfo = sys.exc_info()\n        finally:\n            if firstresult:  # first result hooks return a single value\n                outcome = _Result(results[0] if results else None, excinfo)\n            else:\n                outcome = _Result(results, excinfo)\n    \n            # run all wrapper post-yield blocks\n            for gen in reversed(teardowns):\n                try:\n                    gen.send(outcome)\n                    _raise_wrapfail(gen, \"has second yield\")\n                except StopIteration:\n                    pass\n    \n>           return outcome.get_result()\n\nRudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\callers.py:208: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pluggy.callers._Result object at 0x000001E69F5F36D0>\n\n    def get_result(self):\n        \"\"\"Get the result(s) for this hook call.\n    \n        If the hook was marked as a ``firstresult`` only a single value\n        will be returned otherwise a list of results.\n        \"\"\"\n        __tracebackhide__ = True\n        if self._excinfo is None:\n            return self._result\n        else:\n            ex = self._excinfo\n            if _py3:\n>               raise ex[1].with_traceback(ex[2])\n\nRudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\callers.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhook_impls = [<HookImpl plugin_name='2090004952208', plugin=<allure_commons.logger.AllureFileLogger object at 0x000001E69E00B490>>]\ncaller_kwargs = {'file_name': '74c39602-d772-4ee8-93e1-f9274525678c-attachment.png', 'source': 'screenshot.png'}\nfirstresult = False\n\n    def _multicall(hook_impls, caller_kwargs, firstresult=False):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    \"hook call must provide argument %r\" % (argname,)\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\nRudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\callers.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <allure_commons.logger.AllureFileLogger object at 0x000001E69E00B490>\nsource = 'screenshot.png'\nfile_name = '74c39602-d772-4ee8-93e1-f9274525678c-attachment.png'\n\n    @hookimpl\n    def report_attached_file(self, source, file_name):\n        destination = self._report_dir / file_name\n>       shutil.copy2(source, destination)\n\nRudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\allure_commons\\logger.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsrc = 'screenshot.png'\ndst = WindowsPath('C:/Users/RudreshaC/PycharmProjects/RantCell_Automation/screenshots/74c39602-d772-4ee8-93e1-f9274525678c-attachment.png')\n\n    def copy2(src, dst, *, follow_symlinks=True):\n        \"\"\"Copy data and metadata. Return the file's destination.\n    \n        Metadata is copied with copystat(). Please see the copystat function\n        for more information.\n    \n        The destination may be a directory.\n    \n        If follow_symlinks is false, symlinks won't be followed. This\n        resembles GNU's \"cp -P src dst\".\n        \"\"\"\n        if os.path.isdir(dst):\n            dst = os.path.join(dst, os.path.basename(src))\n>       copyfile(src, dst, follow_symlinks=follow_symlinks)\n\nRudreshaC\\AppData\\Local\\Programs\\Python\\Python39\\lib\\shutil.py:444: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsrc = 'screenshot.png'\ndst = WindowsPath('C:/Users/RudreshaC/PycharmProjects/RantCell_Automation/screenshots/74c39602-d772-4ee8-93e1-f9274525678c-attachment.png')\n\n    def copyfile(src, dst, *, follow_symlinks=True):\n        \"\"\"Copy data from src to dst in the most efficient way possible.\n    \n        If follow_symlinks is not set and src is a symbolic link, a new\n        symlink will be created instead of copying the file it points to.\n    \n        \"\"\"\n        sys.audit(\"shutil.copyfile\", src, dst)\n    \n        if _samefile(src, dst):\n            raise SameFileError(\"{!r} and {!r} are the same file\".format(src, dst))\n    \n        file_size = 0\n        for i, fn in enumerate([src, dst]):\n            try:\n                st = _stat(fn)\n            except OSError:\n                # File most likely does not exist\n                pass\n            else:\n                # XXX What about other special files? (sockets, devices...)\n                if stat.S_ISFIFO(st.st_mode):\n                    fn = fn.path if isinstance(fn, os.DirEntry) else fn\n                    raise SpecialFileError(\"`%s` is a named pipe\" % fn)\n                if _WINDOWS and i == 0:\n                    file_size = st.st_size\n    \n        if not follow_symlinks and _islink(src):\n            os.symlink(os.readlink(src), dst)\n        else:\n>           with open(src, 'rb') as fsrc:\nE           FileNotFoundError: [Errno 2] No such file or directory: 'screenshot.png'\n\nRudreshaC\\AppData\\Local\\Programs\\Python\\Python39\\lib\\shutil.py:264: FileNotFoundError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcases.test_campaigns.Test_Campaign_Driver object at 0x000001E69E023670>\nurl = 'https://preproductionpro.rantcell.com/', userid = 'eva@rantcell.com'\npassword = 'eva@2023'\n\n    def login(self, url, userid, password):\n    \n        try:\n            link_login = [By.XPATH, \"//a[normalize-space()='LOGIN']\", \"Login link\"]\n            textbox_username = (By.ID, \"email\", \"Username\")\n            textbox_password = (By.ID, \"password\", \"Password\")\n            button_login = (By.ID, \"loginbutton\", \"Login button\")\n            link_Dashboard = (By.ID, \"refreshDashboard\", \"Rant Cell\")\n            dropdown_dropdown_toggle = (By.XPATH, \"//span[@class='ng-binding']//i[@class='caret']\", \"Drop Down Toggle\")\n            link_logout = (By.XPATH, \"//a[normalize-space()='Logout']\", \"Logout\")\n            navigation_header = (By.XPATH, \"//div[@class='navbar-header']//a[2]\")\n            dashboard = (By.XPATH, \"//span[normalize-space()='Dashboard']\")\n    \n>           assert GL.launchbrowser(self, url, url)\n\nRudreshaC\\PycharmProjects\\RantCell_Automation\\pageobjects\\login_logout.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <testcases.test_campaigns.Test_Campaign_Driver object at 0x000001E69E023670>\nurl = 'https://preproductionpro.rantcell.com/'\ntitle = 'https://preproductionpro.rantcell.com/'\n\n    def launchbrowser(self, url, title):\n        try:\n            with allure.step(\"Launch the browser and navigate to \" + url):\n                self.driver.get(url)\n                time.sleep(2)\n                self.driver.maximize_window()\n                time.sleep(2)\n                actualtitle = self.driver.current_url\n                if actualtitle == title:\n                    self.driver.get_screenshot_as_file(\"screenshot.png\")\n                    allure.attach.file(\"screenshot.png\", name=\"URL\" + actualtitle,\n                                       attachment_type=allure.attachment_type.PNG)\n                    time.sleep(2)\n                    return True\n                else:\n                    self.driver.get_screenshot_as_file(\"screenshot.png\")\n                    allure.attach.file(\"screenshot.png\", name=\"URL\" + actualtitle,\n                                       attachment_type=allure.attachment_type.PNG)\n                    time.sleep(2)\n                    return False\n        except Exception as e:\n            with allure.step(\"Launch the browser \" + url):\n                self.driver.get_screenshot_as_file(\"screenshot.png\")\n>               allure.attach.file(\"screenshot.png\", name=\"URL\", attachment_type=allure.attachment_type.PNG)\n\nRudreshaC\\PycharmProjects\\RantCell_Automation\\utils\\library.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <allure_commons._allure.Attach object at 0x000001E69DA06E20>\nsource = 'screenshot.png', name = 'URL'\nattachment_type = <AttachmentType.PNG: ('image/png', 'png')>, extension = None\n\n    def file(self, source, name=None, attachment_type=None, extension=None):\n>       plugin_manager.hook.attach_file(source=source, name=name, attachment_type=attachment_type, extension=extension)\n\nRudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\allure_commons\\_allure.py:203: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <_HookCaller 'attach_file'>, args = ()\nkwargs = {'attachment_type': <AttachmentType.PNG: ('image/png', 'png')>, 'extension': None, 'name': 'URL', 'source': 'screenshot.png'}\nnotincall = set()\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n        if self.spec and self.spec.argnames:\n            notincall = (\n                set(self.spec.argnames) - set([\"__multicall__\"]) - set(kwargs.keys())\n            )\n            if notincall:\n                warnings.warn(\n                    \"Argument(s) {} which are declared in the hookspec \"\n                    \"can not be found in this hook call\".format(tuple(notincall)),\n                    stacklevel=2,\n                )\n>       return self._hookexec(self, self.get_hookimpls(), kwargs)\n\nRudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\hooks.py:286: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pluggy.manager.PluginManager object at 0x000001E69D9D0280>\nhook = <_HookCaller 'attach_file'>\nmethods = [<HookImpl plugin_name='2090004876544', plugin=<allure_pytest.listener.AllureListener object at 0x000001E69DFF8D00>>]\nkwargs = {'attachment_type': <AttachmentType.PNG: ('image/png', 'png')>, 'extension': None, 'name': 'URL', 'source': 'screenshot.png'}\n\n    def _hookexec(self, hook, methods, kwargs):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook, methods, kwargs)\n\nRudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\manager.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhook = <_HookCaller 'attach_file'>\nmethods = [<HookImpl plugin_name='2090004876544', plugin=<allure_pytest.listener.AllureListener object at 0x000001E69DFF8D00>>]\nkwargs = {'attachment_type': <AttachmentType.PNG: ('image/png', 'png')>, 'extension': None, 'name': 'URL', 'source': 'screenshot.png'}\n\n>   self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\n        methods,\n        kwargs,\n        firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\n    )\n\nRudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\manager.py:84: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhook_impls = [<HookImpl plugin_name='2090004876544', plugin=<allure_pytest.listener.AllureListener object at 0x000001E69DFF8D00>>]\ncaller_kwargs = {'attachment_type': <AttachmentType.PNG: ('image/png', 'png')>, 'extension': None, 'name': 'URL', 'source': 'screenshot.png'}\nfirstresult = False\n\n    def _multicall(hook_impls, caller_kwargs, firstresult=False):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    \"hook call must provide argument %r\" % (argname,)\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n                        res = hook_impl.function(*args)\n                        if res is not None:\n                            results.append(res)\n                            if firstresult:  # halt further impl calls\n                                break\n            except BaseException:\n                excinfo = sys.exc_info()\n        finally:\n            if firstresult:  # first result hooks return a single value\n                outcome = _Result(results[0] if results else None, excinfo)\n            else:\n                outcome = _Result(results, excinfo)\n    \n            # run all wrapper post-yield blocks\n            for gen in reversed(teardowns):\n                try:\n                    gen.send(outcome)\n                    _raise_wrapfail(gen, \"has second yield\")\n                except StopIteration:\n                    pass\n    \n>           return outcome.get_result()\n\nRudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\callers.py:208: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pluggy.callers._Result object at 0x000001E69F5E1520>\n\n    def get_result(self):\n        \"\"\"Get the result(s) for this hook call.\n    \n        If the hook was marked as a ``firstresult`` only a single value\n        will be returned otherwise a list of results.\n        \"\"\"\n        __tracebackhide__ = True\n        if self._excinfo is None:\n            return self._result\n        else:\n            ex = self._excinfo\n            if _py3:\n>               raise ex[1].with_traceback(ex[2])\n\nRudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\callers.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhook_impls = [<HookImpl plugin_name='2090004876544', plugin=<allure_pytest.listener.AllureListener object at 0x000001E69DFF8D00>>]\ncaller_kwargs = {'attachment_type': <AttachmentType.PNG: ('image/png', 'png')>, 'extension': None, 'name': 'URL', 'source': 'screenshot.png'}\nfirstresult = False\n\n    def _multicall(hook_impls, caller_kwargs, firstresult=False):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    \"hook call must provide argument %r\" % (argname,)\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\nRudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\callers.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <allure_pytest.listener.AllureListener object at 0x000001E69DFF8D00>\nsource = 'screenshot.png', name = 'URL'\nattachment_type = <AttachmentType.PNG: ('image/png', 'png')>, extension = None\n\n    @allure_commons.hookimpl\n    def attach_file(self, source, name, attachment_type, extension):\n>       self.allure_logger.attach_file(uuid4(), source, name=name, attachment_type=attachment_type, extension=extension)\n\nRudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\allure_pytest\\listener.py:240: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <allure_commons.reporter.AllureReporter object at 0x000001E69DFF8D30>\nuuid = '5887e8e5-21bb-47d3-98cc-8d8a55e5172e', source = 'screenshot.png'\nname = 'URL', attachment_type = <AttachmentType.PNG: ('image/png', 'png')>\nextension = None, parent_uuid = None\n\n    def attach_file(self, uuid, source, name=None, attachment_type=None, extension=None, parent_uuid=None):\n        file_name = self._attach(uuid, name=name, attachment_type=attachment_type,\n                                 extension=extension, parent_uuid=parent_uuid)\n>       plugin_manager.hook.report_attached_file(source=source, file_name=file_name)\n\nRudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\allure_commons\\reporter.py:160: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <_HookCaller 'report_attached_file'>, args = ()\nkwargs = {'file_name': '5887e8e5-21bb-47d3-98cc-8d8a55e5172e-attachment.png', 'source': 'screenshot.png'}\nnotincall = set()\n\n    def __call__(self, *args, **kwargs):\n        if args:\n            raise TypeError(\"hook calling supports only keyword arguments\")\n        assert not self.is_historic()\n        if self.spec and self.spec.argnames:\n            notincall = (\n                set(self.spec.argnames) - set([\"__multicall__\"]) - set(kwargs.keys())\n            )\n            if notincall:\n                warnings.warn(\n                    \"Argument(s) {} which are declared in the hookspec \"\n                    \"can not be found in this hook call\".format(tuple(notincall)),\n                    stacklevel=2,\n                )\n>       return self._hookexec(self, self.get_hookimpls(), kwargs)\n\nRudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\hooks.py:286: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pluggy.manager.PluginManager object at 0x000001E69D9D0280>\nhook = <_HookCaller 'report_attached_file'>\nmethods = [<HookImpl plugin_name='2090004952208', plugin=<allure_commons.logger.AllureFileLogger object at 0x000001E69E00B490>>]\nkwargs = {'file_name': '5887e8e5-21bb-47d3-98cc-8d8a55e5172e-attachment.png', 'source': 'screenshot.png'}\n\n    def _hookexec(self, hook, methods, kwargs):\n        # called from all hookcaller instances.\n        # enable_tracing will set its own wrapping function at self._inner_hookexec\n>       return self._inner_hookexec(hook, methods, kwargs)\n\nRudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\manager.py:93: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhook = <_HookCaller 'report_attached_file'>\nmethods = [<HookImpl plugin_name='2090004952208', plugin=<allure_commons.logger.AllureFileLogger object at 0x000001E69E00B490>>]\nkwargs = {'file_name': '5887e8e5-21bb-47d3-98cc-8d8a55e5172e-attachment.png', 'source': 'screenshot.png'}\n\n>   self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\n        methods,\n        kwargs,\n        firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\n    )\n\nRudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\manager.py:84: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhook_impls = [<HookImpl plugin_name='2090004952208', plugin=<allure_commons.logger.AllureFileLogger object at 0x000001E69E00B490>>]\ncaller_kwargs = {'file_name': '5887e8e5-21bb-47d3-98cc-8d8a55e5172e-attachment.png', 'source': 'screenshot.png'}\nfirstresult = False\n\n    def _multicall(hook_impls, caller_kwargs, firstresult=False):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    \"hook call must provide argument %r\" % (argname,)\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n                        res = hook_impl.function(*args)\n                        if res is not None:\n                            results.append(res)\n                            if firstresult:  # halt further impl calls\n                                break\n            except BaseException:\n                excinfo = sys.exc_info()\n        finally:\n            if firstresult:  # first result hooks return a single value\n                outcome = _Result(results[0] if results else None, excinfo)\n            else:\n                outcome = _Result(results, excinfo)\n    \n            # run all wrapper post-yield blocks\n            for gen in reversed(teardowns):\n                try:\n                    gen.send(outcome)\n                    _raise_wrapfail(gen, \"has second yield\")\n                except StopIteration:\n                    pass\n    \n>           return outcome.get_result()\n\nRudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\callers.py:208: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pluggy.callers._Result object at 0x000001E69F5E1040>\n\n    def get_result(self):\n        \"\"\"Get the result(s) for this hook call.\n    \n        If the hook was marked as a ``firstresult`` only a single value\n        will be returned otherwise a list of results.\n        \"\"\"\n        __tracebackhide__ = True\n        if self._excinfo is None:\n            return self._result\n        else:\n            ex = self._excinfo\n            if _py3:\n>               raise ex[1].with_traceback(ex[2])\n\nRudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\callers.py:80: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhook_impls = [<HookImpl plugin_name='2090004952208', plugin=<allure_commons.logger.AllureFileLogger object at 0x000001E69E00B490>>]\ncaller_kwargs = {'file_name': '5887e8e5-21bb-47d3-98cc-8d8a55e5172e-attachment.png', 'source': 'screenshot.png'}\nfirstresult = False\n\n    def _multicall(hook_impls, caller_kwargs, firstresult=False):\n        \"\"\"Execute a call into multiple python functions/methods and return the\n        result(s).\n    \n        ``caller_kwargs`` comes from _HookCaller.__call__().\n        \"\"\"\n        __tracebackhide__ = True\n        results = []\n        excinfo = None\n        try:  # run impl and wrapper setup functions in a loop\n            teardowns = []\n            try:\n                for hook_impl in reversed(hook_impls):\n                    try:\n                        args = [caller_kwargs[argname] for argname in hook_impl.argnames]\n                    except KeyError:\n                        for argname in hook_impl.argnames:\n                            if argname not in caller_kwargs:\n                                raise HookCallError(\n                                    \"hook call must provide argument %r\" % (argname,)\n                                )\n    \n                    if hook_impl.hookwrapper:\n                        try:\n                            gen = hook_impl.function(*args)\n                            next(gen)  # first yield\n                            teardowns.append(gen)\n                        except StopIteration:\n                            _raise_wrapfail(gen, \"did not yield\")\n                    else:\n>                       res = hook_impl.function(*args)\n\nRudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\callers.py:187: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <allure_commons.logger.AllureFileLogger object at 0x000001E69E00B490>\nsource = 'screenshot.png'\nfile_name = '5887e8e5-21bb-47d3-98cc-8d8a55e5172e-attachment.png'\n\n    @hookimpl\n    def report_attached_file(self, source, file_name):\n        destination = self._report_dir / file_name\n>       shutil.copy2(source, destination)\n\nRudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\allure_commons\\logger.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsrc = 'screenshot.png'\ndst = WindowsPath('C:/Users/RudreshaC/PycharmProjects/RantCell_Automation/screenshots/5887e8e5-21bb-47d3-98cc-8d8a55e5172e-attachment.png')\n\n    def copy2(src, dst, *, follow_symlinks=True):\n        \"\"\"Copy data and metadata. Return the file's destination.\n    \n        Metadata is copied with copystat(). Please see the copystat function\n        for more information.\n    \n        The destination may be a directory.\n    \n        If follow_symlinks is false, symlinks won't be followed. This\n        resembles GNU's \"cp -P src dst\".\n        \"\"\"\n        if os.path.isdir(dst):\n            dst = os.path.join(dst, os.path.basename(src))\n>       copyfile(src, dst, follow_symlinks=follow_symlinks)\n\nRudreshaC\\AppData\\Local\\Programs\\Python\\Python39\\lib\\shutil.py:444: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsrc = 'screenshot.png'\ndst = WindowsPath('C:/Users/RudreshaC/PycharmProjects/RantCell_Automation/screenshots/5887e8e5-21bb-47d3-98cc-8d8a55e5172e-attachment.png')\n\n    def copyfile(src, dst, *, follow_symlinks=True):\n        \"\"\"Copy data from src to dst in the most efficient way possible.\n    \n        If follow_symlinks is not set and src is a symbolic link, a new\n        symlink will be created instead of copying the file it points to.\n    \n        \"\"\"\n        sys.audit(\"shutil.copyfile\", src, dst)\n    \n        if _samefile(src, dst):\n            raise SameFileError(\"{!r} and {!r} are the same file\".format(src, dst))\n    \n        file_size = 0\n        for i, fn in enumerate([src, dst]):\n            try:\n                st = _stat(fn)\n            except OSError:\n                # File most likely does not exist\n                pass\n            else:\n                # XXX What about other special files? (sockets, devices...)\n                if stat.S_ISFIFO(st.st_mode):\n                    fn = fn.path if isinstance(fn, os.DirEntry) else fn\n                    raise SpecialFileError(\"`%s` is a named pipe\" % fn)\n                if _WINDOWS and i == 0:\n                    file_size = st.st_size\n    \n        if not follow_symlinks and _islink(src):\n            os.symlink(os.readlink(src), dst)\n        else:\n>           with open(src, 'rb') as fsrc:\nE           FileNotFoundError: [Errno 2] No such file or directory: 'screenshot.png'\n\nRudreshaC\\AppData\\Local\\Programs\\Python\\Python39\\lib\\shutil.py:264: FileNotFoundError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcases.test_campaigns.Test_Campaign_Driver object at 0x000001E69E023670>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"a4134b2a9f6cf1ea5e6e8d137a35273b\")>\ndevice = 'Samsung SM-G781B', campaign = 'T001', environment = 'PreProd'\nurl = 'https://preproductionpro.rantcell.com/', userid = 'eva@rantcell.com'\npassword = 'eva@2023'\n\n    @pytest.mark.parametrize(\"device,campaign,environment,url,userid,password\",\n                             readexcel.readdata.fetch_camapaigns_enviroment(\"\"))\n    def test_campaign(self, setup, device, campaign, environment, url, userid, password):\n        self.driver = setup\n    \n        # Fetch component based on the camapign \"T001\",\"T002\" etc\n    \n        components = readexcel.readdata.fetch_components(campaign)\n    \n        # Login to RantCell Application\n    \n>       GL.login(self, url, userid, password)\n\nRudreshaC\\PycharmProjects\\RantCell_Automation\\testcases\\test_campaigns.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <testcases.test_campaigns.Test_Campaign_Driver object at 0x000001E69E023670>\nurl = 'https://preproductionpro.rantcell.com/', userid = 'eva@rantcell.com'\npassword = 'eva@2023'\n\n    def login(self, url, userid, password):\n    \n        try:\n            link_login = [By.XPATH, \"//a[normalize-space()='LOGIN']\", \"Login link\"]\n            textbox_username = (By.ID, \"email\", \"Username\")\n            textbox_password = (By.ID, \"password\", \"Password\")\n            button_login = (By.ID, \"loginbutton\", \"Login button\")\n            link_Dashboard = (By.ID, \"refreshDashboard\", \"Rant Cell\")\n            dropdown_dropdown_toggle = (By.XPATH, \"//span[@class='ng-binding']//i[@class='caret']\", \"Drop Down Toggle\")\n            link_logout = (By.XPATH, \"//a[normalize-space()='Logout']\", \"Logout\")\n            navigation_header = (By.XPATH, \"//div[@class='navbar-header']//a[2]\")\n            dashboard = (By.XPATH, \"//span[normalize-space()='Dashboard']\")\n    \n            assert GL.launchbrowser(self, url, url)\n    \n            assert GL.click(self, link_login)\n    \n            time.sleep(5)\n    \n            assert (GL.inputtext(self, textbox_username, userid))\n    \n            time.sleep(2)\n    \n            assert (GL.inputtext(self, textbox_password, password))\n    \n            time.sleep(2)\n    \n            assert GL.click(self, button_login)\n    \n            time.sleep(5)\n    \n            assert GL.verifyelementispresent(self, dashboard, \"Dashboard\")\n    \n            time.sleep(5)\n    \n            # time.sleep(5)\n    \n            # assert GL.clickallure(self.link_login,\"T\")\n            # assert True\n    \n    \n        except Exception as e:\n>           assert False\nE           AssertionError\n\nRudreshaC\\PycharmProjects\\RantCell_Automation\\pageobjects\\login_logout.py:54: AssertionError"}, "steps": [{"name": "Launch the browser and navigate to https://preproductionpro.rantcell.com/", "status": "broken", "statusDetails": {"message": "FileNotFoundError: [Errno 2] No such file or directory: 'screenshot.png'\n", "trace": "  File \"C:\\Users\\RudreshaC\\PycharmProjects\\RantCell_Automation\\utils\\library.py\", line 36, in launchbrowser\n    allure.attach.file(\"screenshot.png\", name=\"URL\" + actualtitle,\n  File \"C:\\Users\\RudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 203, in file\n    plugin_manager.hook.attach_file(source=source, name=name, attachment_type=attachment_type, extension=extension)\n  File \"C:\\Users\\RudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\hooks.py\", line 286, in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\n  File \"C:\\Users\\RudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\manager.py\", line 93, in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\n  File \"C:\\Users\\RudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\manager.py\", line 84, in <lambda>\n    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\n  File \"C:\\Users\\RudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\callers.py\", line 208, in _multicall\n    return outcome.get_result()\n  File \"C:\\Users\\RudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\callers.py\", line 80, in get_result\n    raise ex[1].with_traceback(ex[2])\n  File \"C:\\Users\\RudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\n  File \"C:\\Users\\RudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\allure_pytest\\listener.py\", line 240, in attach_file\n    self.allure_logger.attach_file(uuid4(), source, name=name, attachment_type=attachment_type, extension=extension)\n  File \"C:\\Users\\RudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\allure_commons\\reporter.py\", line 160, in attach_file\n    plugin_manager.hook.report_attached_file(source=source, file_name=file_name)\n  File \"C:\\Users\\RudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\hooks.py\", line 286, in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\n  File \"C:\\Users\\RudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\manager.py\", line 93, in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\n  File \"C:\\Users\\RudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\manager.py\", line 84, in <lambda>\n    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\n  File \"C:\\Users\\RudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\callers.py\", line 208, in _multicall\n    return outcome.get_result()\n  File \"C:\\Users\\RudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\callers.py\", line 80, in get_result\n    raise ex[1].with_traceback(ex[2])\n  File \"C:\\Users\\RudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\n  File \"C:\\Users\\RudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\allure_commons\\logger.py\", line 44, in report_attached_file\n    shutil.copy2(source, destination)\n  File \"C:\\Users\\RudreshaC\\AppData\\Local\\Programs\\Python\\Python39\\lib\\shutil.py\", line 444, in copy2\n    copyfile(src, dst, follow_symlinks=follow_symlinks)\n  File \"C:\\Users\\RudreshaC\\AppData\\Local\\Programs\\Python\\Python39\\lib\\shutil.py\", line 264, in copyfile\n    with open(src, 'rb') as fsrc:\n"}, "attachments": [{"name": "URLhttps://preproductionpro.rantcell.com/", "source": "74c39602-d772-4ee8-93e1-f9274525678c-attachment.png", "type": "image/png"}], "start": 1681980141838, "stop": 1681980150356}, {"name": "Launch the browser https://preproductionpro.rantcell.com/", "status": "broken", "statusDetails": {"message": "FileNotFoundError: [Errno 2] No such file or directory: 'screenshot.png'\n", "trace": "  File \"C:\\Users\\RudreshaC\\PycharmProjects\\RantCell_Automation\\utils\\library.py\", line 49, in launchbrowser\n    allure.attach.file(\"screenshot.png\", name=\"URL\", attachment_type=allure.attachment_type.PNG)\n  File \"C:\\Users\\RudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 203, in file\n    plugin_manager.hook.attach_file(source=source, name=name, attachment_type=attachment_type, extension=extension)\n  File \"C:\\Users\\RudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\hooks.py\", line 286, in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\n  File \"C:\\Users\\RudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\manager.py\", line 93, in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\n  File \"C:\\Users\\RudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\manager.py\", line 84, in <lambda>\n    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\n  File \"C:\\Users\\RudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\callers.py\", line 208, in _multicall\n    return outcome.get_result()\n  File \"C:\\Users\\RudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\callers.py\", line 80, in get_result\n    raise ex[1].with_traceback(ex[2])\n  File \"C:\\Users\\RudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\n  File \"C:\\Users\\RudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\allure_pytest\\listener.py\", line 240, in attach_file\n    self.allure_logger.attach_file(uuid4(), source, name=name, attachment_type=attachment_type, extension=extension)\n  File \"C:\\Users\\RudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\allure_commons\\reporter.py\", line 160, in attach_file\n    plugin_manager.hook.report_attached_file(source=source, file_name=file_name)\n  File \"C:\\Users\\RudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\hooks.py\", line 286, in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\n  File \"C:\\Users\\RudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\manager.py\", line 93, in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\n  File \"C:\\Users\\RudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\manager.py\", line 84, in <lambda>\n    self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\n  File \"C:\\Users\\RudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\callers.py\", line 208, in _multicall\n    return outcome.get_result()\n  File \"C:\\Users\\RudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\callers.py\", line 80, in get_result\n    raise ex[1].with_traceback(ex[2])\n  File \"C:\\Users\\RudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\pluggy\\callers.py\", line 187, in _multicall\n    res = hook_impl.function(*args)\n  File \"C:\\Users\\RudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\allure_commons\\logger.py\", line 44, in report_attached_file\n    shutil.copy2(source, destination)\n  File \"C:\\Users\\RudreshaC\\AppData\\Local\\Programs\\Python\\Python39\\lib\\shutil.py\", line 444, in copy2\n    copyfile(src, dst, follow_symlinks=follow_symlinks)\n  File \"C:\\Users\\RudreshaC\\AppData\\Local\\Programs\\Python\\Python39\\lib\\shutil.py\", line 264, in copyfile\n    with open(src, 'rb') as fsrc:\n"}, "attachments": [{"name": "URL", "source": "5887e8e5-21bb-47d3-98cc-8d8a55e5172e-attachment.png", "type": "image/png"}], "start": 1681980150360, "stop": 1681980151266}], "parameters": [{"name": "device", "value": "'Samsung SM-G781B'"}, {"name": "campaign", "value": "'T001'"}, {"name": "environment", "value": "'PreProd'"}, {"name": "url", "value": "'https://preproductionpro.rantcell.com/'"}, {"name": "userid", "value": "'eva@rantcell.com'"}, {"name": "password", "value": "'eva@2023'"}], "start": 1681980141748, "stop": 1681980151267, "uuid": "547f49ad-3414-44c6-b479-920d74013b5d", "historyId": "3e9954af05040b18e5779109f57e04ae", "testCaseId": "19442f1071c1350d924985a2afd1619e", "fullName": "test_campaigns.Test_Campaign_Driver#test_campaign", "labels": [{"name": "suite", "value": "test_campaigns"}, {"name": "subSuite", "value": "Test_Campaign_Driver"}, {"name": "host", "value": "rudresha_c"}, {"name": "thread", "value": "30488-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_campaigns"}]}