{"name": "test_campaign[Samsung SM-G781B-T001-PreProd-https://preproductionpro.rantcell.com/-eva@rantcell.com-eva@2023]", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <testcases.test_campaigns1.Test_Campaign_Driver object at 0x00000208C2492EB0>\nLocators = ('xpath', \"//span[normalize-space()='Dashboard']\")\nelementName = 'Dashboard'\n\n    def verifyelementispresent(self, Locators, elementName):\n        try:\n            with allure.step(\"Verify \" + elementName + \" element is present \"):\n                locatortype = Locators[0]\n                locatorProperty = Locators[1]\n>               element = self.driver.find_element(locatortype, locatorProperty)\n\n..\\utils\\library.py:114: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7d208bde94bd26135693430ede8a36e8\")>\nby = 'xpath', value = \"//span[normalize-space()='Dashboard']\"\n\n    def find_element(self, by=By.ID, value: Optional[str] = None) -> WebElement:\n        \"\"\"Find an element given a By strategy and locator.\n    \n        :Usage:\n            ::\n    \n                element = driver.find_element(By.ID, 'foo')\n    \n        :rtype: WebElement\n        \"\"\"\n        if isinstance(by, RelativeBy):\n            elements = self.find_elements(by=by, value=value)\n            if not elements:\n                raise NoSuchElementException(f\"Cannot locate relative element with: {by.root}\")\n            return elements[0]\n    \n        if by == By.ID:\n            by = By.CSS_SELECTOR\n            value = f'[id=\"{value}\"]'\n        elif by == By.CLASS_NAME:\n            by = By.CSS_SELECTOR\n            value = f\".{value}\"\n        elif by == By.NAME:\n            by = By.CSS_SELECTOR\n            value = f'[name=\"{value}\"]'\n    \n>       return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n\n..\\..\\RantCell_V1\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:831: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7d208bde94bd26135693430ede8a36e8\")>\ndriver_command = 'findElement'\nparams = {'using': 'xpath', 'value': \"//span[normalize-space()='Dashboard']\"}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n..\\..\\RantCell_V1\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000208C248C880>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...dInitThunk [0x75AB7D49+25]\\\\n\\\\tRtlInitializeExceptionChain [0x77C5B74B+107]\\\\n\\\\tRtlClearBits [0x77C5B6CF+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//span[normalize-space()='Dashboard']\"}\nE         (Session info: chrome=112.0.5615.137)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x00D8DCE3+50899]\nE       \t(No symbol) [0x00D1E111]\nE       \t(No symbol) [0x00C25588]\nE       \t(No symbol) [0x00C508F9]\nE       \t(No symbol) [0x00C50AFB]\nE       \t(No symbol) [0x00C7F902]\nE       \t(No symbol) [0x00C6B944]\nE       \t(No symbol) [0x00C7E01C]\nE       \t(No symbol) [0x00C6B6F6]\nE       \t(No symbol) [0x00C47708]\nE       \t(No symbol) [0x00C4886D]\nE       \tGetHandleVerifier [0x00FF3EAE+2566302]\nE       \tGetHandleVerifier [0x010292B1+2784417]\nE       \tGetHandleVerifier [0x0102327C+2759788]\nE       \tGetHandleVerifier [0x00E25740+672048]\nE       \t(No symbol) [0x00D28872]\nE       \t(No symbol) [0x00D241C8]\nE       \t(No symbol) [0x00D242AB]\nE       \t(No symbol) [0x00D171B7]\nE       \tBaseThreadInitThunk [0x75AB7D49+25]\nE       \tRtlInitializeExceptionChain [0x77C5B74B+107]\nE       \tRtlClearBits [0x77C5B6CF+191]\n\n..\\..\\RantCell_V1\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcases.test_campaigns1.Test_Campaign_Driver object at 0x00000208C2492EB0>\nurl = 'https://preproductionpro.rantcell.com/', userid = 'eva@rantcell.com'\npassword = 'eva@2023'\n\n    def login(self, url, userid, password):\n    \n        try:\n            link_login = [By.XPATH, \"//a[normalize-space()='LOGIN']\", \"Login link\"]\n            textbox_username = (By.ID, \"email\", \"Username\")\n            textbox_password = (By.ID, \"password\", \"Password\")\n            button_login = (By.ID, \"loginbutton\", \"Login button\")\n            link_Dashboard = (By.ID, \"refreshDashboard\", \"Rant Cell\")\n            dropdown_dropdown_toggle = (By.XPATH, \"//span[@class='ng-binding']//i[@class='caret']\", \"Drop Down Toggle\")\n            link_logout = (By.XPATH, \"//a[normalize-space()='Logout']\", \"Logout\")\n            navigation_header = (By.XPATH, \"//div[@class='navbar-header']//a[2]\")\n            dashboard = (By.XPATH, \"//span[normalize-space()='Dashboard']\")\n    \n            assert GL.launchbrowser(self, url, url)\n    \n            assert GL.click(self, link_login)\n    \n            time.sleep(5)\n    \n            assert (GL.inputtext(self, textbox_username, userid))\n    \n            time.sleep(2)\n    \n            assert (GL.inputtext(self, textbox_password, password))\n    \n            time.sleep(2)\n    \n            assert GL.click(self, button_login)\n    \n            time.sleep(5)\n    \n>           assert GL.verifyelementispresent(self, dashboard, \"Dashboard\")\n\n..\\pageobjects\\login_logout.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <testcases.test_campaigns1.Test_Campaign_Driver object at 0x00000208C2492EB0>\nLocators = ('xpath', \"//span[normalize-space()='Dashboard']\")\nelementName = 'Dashboard'\n\n    def verifyelementispresent(self, Locators, elementName):\n        try:\n            with allure.step(\"Verify \" + elementName + \" element is present \"):\n                locatortype = Locators[0]\n                locatorProperty = Locators[1]\n                element = self.driver.find_element(locatortype, locatorProperty)\n                # Verify if the element is present\n                if element:\n                    #self.takescreenshot(elementName)\n                    self.driver.get_screenshot_as_file(\"screenshot.png\")\n                    allure.attach.file(\"screenshot.png\", name=elementName, attachment_type=allure.attachment_type.PNG)\n                    time.sleep(2)\n                    return True\n        except Exception as e:\n            with allure.step(\"Failed to verify the \" + elementName + \" element \"):\n>               self.takescreenshot(elementName)\nE               AttributeError: 'Test_Campaign_Driver' object has no attribute 'takescreenshot'\n\n..\\utils\\library.py:124: AttributeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <testcases.test_campaigns1.Test_Campaign_Driver object at 0x00000208C2492EB0>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"7d208bde94bd26135693430ede8a36e8\")>\ndevice = 'Samsung SM-G781B', campaign = 'T001', environment = 'PreProd'\nurl = 'https://preproductionpro.rantcell.com/', userid = 'eva@rantcell.com'\npassword = 'eva@2023'\n\n    @pytest.mark.parametrize(\"device,campaign,environment,url,userid,password\",\n                             readexcel.readdata.fetch_camapaigns_enviroment(\"\"))\n    def test_campaign(self, setup, device, campaign, environment, url, userid, password):\n        self.driver = setup\n    \n        # Fetch component based on the camapign \"T001\",\"T002\" etc\n    \n        components = readexcel.readdata.fetch_components(campaign)\n    \n        # Login to RantCell Application\n    \n>       GL.login(self, url, userid, password)\n\n..\\testcases\\test_campaigns1.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <testcases.test_campaigns1.Test_Campaign_Driver object at 0x00000208C2492EB0>\nurl = 'https://preproductionpro.rantcell.com/', userid = 'eva@rantcell.com'\npassword = 'eva@2023'\n\n    def login(self, url, userid, password):\n    \n        try:\n            link_login = [By.XPATH, \"//a[normalize-space()='LOGIN']\", \"Login link\"]\n            textbox_username = (By.ID, \"email\", \"Username\")\n            textbox_password = (By.ID, \"password\", \"Password\")\n            button_login = (By.ID, \"loginbutton\", \"Login button\")\n            link_Dashboard = (By.ID, \"refreshDashboard\", \"Rant Cell\")\n            dropdown_dropdown_toggle = (By.XPATH, \"//span[@class='ng-binding']//i[@class='caret']\", \"Drop Down Toggle\")\n            link_logout = (By.XPATH, \"//a[normalize-space()='Logout']\", \"Logout\")\n            navigation_header = (By.XPATH, \"//div[@class='navbar-header']//a[2]\")\n            dashboard = (By.XPATH, \"//span[normalize-space()='Dashboard']\")\n    \n            assert GL.launchbrowser(self, url, url)\n    \n            assert GL.click(self, link_login)\n    \n            time.sleep(5)\n    \n            assert (GL.inputtext(self, textbox_username, userid))\n    \n            time.sleep(2)\n    \n            assert (GL.inputtext(self, textbox_password, password))\n    \n            time.sleep(2)\n    \n            assert GL.click(self, button_login)\n    \n            time.sleep(5)\n    \n            assert GL.verifyelementispresent(self, dashboard, \"Dashboard\")\n    \n            time.sleep(5)\n    \n            # time.sleep(5)\n    \n            # assert GL.clickallure(self.link_login,\"T\")\n            # assert True\n    \n    \n        except Exception as e:\n>           assert False\nE           AssertionError\n\n..\\pageobjects\\login_logout.py:54: AssertionError"}, "steps": [{"name": "Launch the browser and navigate to https://preproductionpro.rantcell.com/", "status": "passed", "attachments": [{"name": "URLhttps://preproductionpro.rantcell.com/", "source": "454ee6a9-4e61-4177-991f-7f4c05264eab-attachment.png", "type": "image/png"}], "start": 1682046683352, "stop": 1682046693706}, {"name": "Click on Login link element", "status": "passed", "start": 1682046693706, "stop": 1682046696282}, {"name": "Enter value in Username edit field ", "status": "passed", "start": 1682046701297, "stop": 1682046701433}, {"name": "Enter value in Password edit field ", "status": "passed", "start": 1682046703440, "stop": 1682046703545}, {"name": "Click on Login button element", "status": "passed", "start": 1682046705552, "stop": 1682046705614}, {"name": "Verify Dashboard element is present ", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//span[normalize-space()='Dashboard']\"}\n  (Session info: chrome=112.0.5615.137)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x00D8DCE3+50899]\n\t(No symbol) [0x00D1E111]\n\t(No symbol) [0x00C25588]\n\t(No symbol) [0x00C508F9]\n\t(No symbol) [0x00C50AFB]\n\t(No symbol) [0x00C7F902]\n\t(No symbol) [0x00C6B944]\n\t(No symbol) [0x00C7E01C]\n\t(No symbol) [0x00C6B6F6]\n\t(No symbol) [0x00C47708]\n\t(No symbol) [0x00C4886D]\n\tGetHandleVerifier [0x00FF3EAE+2566302]\n\tGetHandleVerifier [0x010292B1+2784417]\n\tGetHandleVerifier [0x0102327C+2759788]\n\tGetHandleVerifier [0x00E25740+672048]\n\t(No symbol) [0x00D28872]\n\t(No symbol) [0x00D241C8]\n\t(No symbol) [0x00D242AB]\n\t(No symbol) [0x00D171B7]\n\tBaseThreadInitThunk [0x75AB7D49+25]\n\tRtlInitializeExceptionChain [0x77C5B74B+107]\n\tRtlClearBits [0x77C5B6CF+191]\n\n", "trace": "  File \"C:\\Users\\RudreshaC\\PycharmProjects\\RantCell_Automation\\utils\\library.py\", line 114, in verifyelementispresent\n    element = self.driver.find_element(locatortype, locatorProperty)\n  File \"C:\\Users\\RudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 831, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n  File \"C:\\Users\\RudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 440, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\RudreshaC\\PycharmProjects\\RantCell_V1\\venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 245, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1682046710623, "stop": 1682046710645}, {"name": "Failed to verify the Dashboard element ", "status": "broken", "statusDetails": {"message": "AttributeError: 'Test_Campaign_Driver' object has no attribute 'takescreenshot'\n", "trace": "  File \"C:\\Users\\RudreshaC\\PycharmProjects\\RantCell_Automation\\utils\\library.py\", line 124, in verifyelementispresent\n    self.takescreenshot(elementName)\n"}, "start": 1682046710646, "stop": 1682046710646}], "parameters": [{"name": "device", "value": "'Samsung SM-G781B'"}, {"name": "campaign", "value": "'T001'"}, {"name": "environment", "value": "'PreProd'"}, {"name": "url", "value": "'https://preproductionpro.rantcell.com/'"}, {"name": "userid", "value": "'eva@rantcell.com'"}, {"name": "password", "value": "'eva@2023'"}], "start": 1682046683241, "stop": 1682046710646, "uuid": "2bf2e273-ad29-4f59-a0ad-85599709d008", "historyId": "358b11b59b6dadf7a3fc6a515a36dcad", "testCaseId": "75e644666a1c60dfa7e88c10e366449f", "fullName": "test_campaigns1.Test_Campaign_Driver#test_campaign", "labels": [{"name": "suite", "value": "test_campaigns1"}, {"name": "subSuite", "value": "Test_Campaign_Driver"}, {"name": "host", "value": "rudresha_c"}, {"name": "thread", "value": "33088-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_campaigns1"}]}